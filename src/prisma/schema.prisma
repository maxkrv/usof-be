// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ContentStatus {
  ACTIVE
  INACTIVE
}

enum ReactionType {
  LIKE
  DISLIKE
}

model User {
  id             Int        @id @default(autoincrement())
  username       String     @unique @db.VarChar(255)
  email          String     @unique @db.VarChar(255)
  fullName       String     @map("full_name") @db.VarChar(255)
  profilePicture String?    @map("profile_picture") @db.VarChar(255)
  password       String     @db.VarChar(255)
  role           Role       @default(USER)
  isActive       Boolean    @default(false) @map("is_active")
  rating         Int        @default(0)
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @updatedAt @map("updated_at")
  Post           Post[]
  Reaction       Reaction[]
  Comment        Comment[]

  @@map("users")
}

model Post {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(255)
  content      String
  status       ContentStatus  @default(ACTIVE)
  isBlocked    Boolean        @default(false) @map("is_blocked")
  rating       Int            @default(0)
  author       User           @relation(fields: [userId], references: [id])
  userId       Int            @map("user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  PostCategory PostCategory[]
  Reaction     Reaction[]
  Comment      Comment[]

  @@map("posts")
}

model Category {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(255)
  description  String         @db.VarChar(255)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @default(now()) @updatedAt @map("updated_at")
  PostCategory PostCategory[]

  @@map("categories")
}

model PostCategory {
  postId     Int      @map("post_id")
  categoryId Int      @map("category_id")
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  isEdited  Boolean       @default(false) @map("is_edited")
  status    ContentStatus @default(ACTIVE)
  rating    Int           @default(0)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")
  Post      Post          @relation(fields: [postId], references: [id])
  postId    Int           @map("post_id")
  User      User          @relation(fields: [userId], references: [id])
  userId    Int           @map("user_id")
  Reaction  Reaction[]

  @@map("comments")
}

model Reaction {
  id        Int          @id @default(autoincrement())
  type      ReactionType
  User      User?        @relation(fields: [userId], references: [id])
  userId    Int?         @map("user_id")
  Post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?         @map("post_id")
  Comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?         @map("comment_id")

  @@map("reactions")
}
